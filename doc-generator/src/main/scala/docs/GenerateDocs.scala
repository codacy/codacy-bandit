package docs

import better.files._
import docs.transformers._
import com.codacy.plugins.api.results.Pattern
import com.codacy.plugins.api.results.Tool
import play.api.libs.json.Json
import com.codacy.plugins.api._

object GenerateDocs {
  val docsRoot = ".." / "docs"
  val descriptionsRoot = docsRoot / "description"
  val descriptionsJsonFile = docsRoot / "description" / "description.json"
  val patternsJsonFile = docsRoot / "patterns.json"

  for (dir <- Seq(docsRoot, descriptionsRoot))
    dir.createDirectoryIfNotExists(createParents = true)
  descriptionsJsonFile.createFileIfNotExists()
  patternsJsonFile.createFileIfNotExists()

  /** Screpe the html file generated by sphinx-build for the bandit
    * tool, find all teh patterns and generates the necessary resources
    * for codacy.
    *
    */
  def main(args: Array[String]): Unit = {
    if (args.length != 2) {
      println("You need to pass two arguments: version and bandit directory.")
      System.exit(1)
    }
    val version = args(0)
    val banditBaseDir = args(1)

    val banditDocsDirectory = banditBaseDir / "doc" / "build"
    if (banditDocsDirectory.notExists) {
      println(
        "ERROR: Expected generated docs in " + banditDocsDirectory + " but found nothing. Please generate the docs."
      )
      sys.exit(255)
    }
    val pPatterns = PluginsDocTransformer.getPatterns(banditDocsDirectory)
    val bPatterns = BlacklistDocTransformer.getPatterns(banditDocsDirectory)
    val specificationsAndDescriptions = (pPatterns ++ bPatterns).sortBy(_._1.patternId.value)
    val specifications = specificationsAndDescriptions.map(_._1)
    val descriptions = specificationsAndDescriptions.map(_._2)
    createMarkdownFiles(specificationsAndDescriptions)
    println("Markdown files generated...")
    val specification =
      Tool.Specification(Tool.Name("bandit"), Some(Tool.Version(version)), specifications.toSet)
    val specificationJson = Json.toJson(specification)
    val specificationJsonString = Json.prettyPrint(specificationJson)
    patternsJsonFile.writeText(specificationJsonString + System.lineSeparator)
    println("Patterns json files generated...")
    val descriptionJson = Json.toJson(
      descriptions.map(
        d =>
          d.copy(
            description = d.description
              .flatMap(
                _.value
                  .split(System.lineSeparator)
                  .headOption // Some descriptions start with ugly characters
                  .map(d => Pattern.DescriptionText(d.dropWhile(_ != 'B')))
              )
        )
      )
    )
    val descriptionJsonString = Json.prettyPrint(descriptionJson)
    descriptionsJsonFile.writeText(descriptionJsonString + System.lineSeparator)
    println("Description json files generated...")
  }

  private def createMarkdownFiles(allPatterns: Seq[(Pattern.Specification, Pattern.Description)]) =
    for {
      (specification, description) <- allPatterns
      patternDescriptionTextFile = descriptionsRoot / s"${specification.patternId}.md"
      descriptionText <- description.description
    } patternDescriptionTextFile.createFileIfNotExists().writeText(descriptionText.value)

}
