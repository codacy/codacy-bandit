package docs

import better.files.Dsl.SymbolicOperations
import better.files._
import docs.transformers._
import docs.model._

object GenerateDocs {
  val docsRoot = "src" / "main" / "resources" / "docs"
  val descriptionsRoot = docsRoot / "description"
  val descriptionsJsonFile = docsRoot / "description" / "description.json"
  val patternsJsonFile = docsRoot / "patterns.json"

  /** Screpe the html file generated by sphinx-build for the bandit
  * tool, find all teh patterns and generates the necessary resources
  * for codacy.
  *
  */
  def run(version: String, banditBaseDir: String): Unit = {
    val banditDocsDirectory = banditBaseDir / "doc" / "build"
    if (banditDocsDirectory.notExists) {
      println(
        "ERROR: Expected generated docs in " + banditDocsDirectory + "but found nothing. Please generate the docs.")
      sys.exit(255)
    }
    val pPatterns = PluginsDocTransformer.getPatterns(banditDocsDirectory)
    val bPatterns = BlacklistDocTransformer.getPatterns(banditDocsDirectory)
    val allPatterns =
      (pPatterns ++ bPatterns).sortWith(_.patternId < _.patternId)
    println(
      allPatterns.length + " patterns found:\n" + allPatterns
        .mkString("\n") + "\n")
    createMarkdownFiles(allPatterns)
    println("Markdown files generated...")
    patternsJsonFile < JsonEncoder.patternsJsonEncoder(version, allPatterns)
    println("Patterns json files generated...")
    descriptionsJsonFile < JsonEncoder.descriptionJsonEncoder(allPatterns)
    println("Description json files generated...")
  }

  private def createMarkdownFiles(allPatterns: Seq[Pattern]) =
    for {
      pattern <- allPatterns
      patternDescriptionTextFile = descriptionsRoot / s"${pattern.patternId}.md"
    } patternDescriptionTextFile < pattern.descriptionText

}
